pipeline {
    agent none
    
    stages {
        stage('Determine Node') {
            steps {
                script {
                    // Set the NODE_LABEL based on the branch name
                    if (env.BRANCH_NAME == 'main') {
                        env.NODE_LABEL = 'test'
                    } else if (env.BRANCH_NAME == 'sudo-main') {
                        env.NODE_LABEL = 'test2'
                    } else if (env.BRANCH_NAME == 'test') {
                        env.NODE_LABEL = 'test'
                    } else {
                        error "No node label defined for branch: ${env.BRANCH_NAME}"
                    }
                    echo "Node label set to: ${env.NODE_LABEL}"
                }
            }
        }

        stage("Code") {
            agent {
                label "${env.NODE_LABEL}"
            }
            steps {
                // Correct usage of env.BRANCH_NAME without quotes
                checkout scmGit(branches: [[name: "${env.BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'GitHub-Jenkins_key', url: 'https://github.com/Hrishabh1811/two_tier_app.git']])
            }
        }

        stage("Build & Test") {
            steps {
                script {
                    // Conditional steps based on the node label
                    if (env.NODE_LABEL == 'test') {
                        echo "Hello from branch ${env.BRANCH_NAME}"
                    } else if (env.NODE_LABEL == 'test2') {
                        echo "Hello from branch ${env.BRANCH_NAME}"
                    } else if (env.NODE_LABEL == 'test') {
                        echo "Hello from branch ${env.BRANCH_NAME}"
                    }
                }
            }
        }
    }
pipeline {
    agent {
        label 'BHT-FE'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[credentialsId: 'GitHub-Jenkins_key', url: 'git@github.com:anupsawant/bhtfe.git']])
            }
        }
        stage("CleanUp"){
            steps{
                sh "sudo docker system prune -f --all"
            }
        }
        stage("Build & Deploy"){
            steps{
                sh "sudo docker-compose up --build -d bh-prod"
            }
        }
    }
    post { 
	always { 
		script { 
				def jobName = env.JOB_NAME 
				def buildNumber = env.BUILD_NUMBER 
				def pipelineStatus = currentBuild.result ?: 'UNKNOWN' 
				def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
				def changes = getGitChanges()
				
 
				def body = """<html> 
						<body> 
							<div style="border: 4px solid ${bannerColor}; padding: 10px;"> 
								<h2>${jobName} - Build ${buildNumber}</h2> 
								<div style="background-color: ${bannerColor}; padding: 10px;"> 
									<h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3> 	
								</div>
								<p>Git Commit changes for the build: ${changes}
								Check the <a href="${BUILD_URL}">console output</a>.</p> 
							</div> 
						</body> 
					</html>""" 
				emailext ( 
					subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}", 
					body: body, 
					to: 'hrishabh.mandhan@pyrack.com',
					replyTo: 'hrishabh.mandhan@pyrack.com',
					mimeType: 'text/html', 
					 
				) 
			} 
	    }
    }
}
def getGitChanges() {
    def gitLog = sh(returnStdout: true, script: 'git log -1 --pretty=format:"%h by %an on %ad: %s" --date=iso').trim()
    def changes = "<li>${gitLog}</li>"
    return changes
}
}
